{"version":3,"file":"class-transformer.umd.min.js","sources":["../../node_modules/reflect-metadata/Reflect.js","../esm5/enums/transformation-type.enum.js","../esm5/MetadataStorage.js","../esm5/storage.js","../esm5/TransformOperationExecutor.js","../esm5/utils/is-promise.util.js","../esm5/utils/get-global.util.js","../esm5/constants/default-options.constant.js","../esm5/ClassTransformer.js","../esm5/index.js","../esm5/decorators/exclude.decorator.js","../esm5/decorators/expose.decorator.js","../esm5/decorators/transform.decorator.js","../esm5/decorators/transform-instance-to-instance.decorator.js","../esm5/decorators/transform-instance-to-plain.decorator.js","../esm5/decorators/transform-plain-to-instance.decorator.js","../esm5/decorators/type.decorator.js"],"sourcesContent":["/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","export var TransformationType;\n(function (TransformationType) {\n    TransformationType[TransformationType[\"PLAIN_TO_CLASS\"] = 0] = \"PLAIN_TO_CLASS\";\n    TransformationType[TransformationType[\"CLASS_TO_PLAIN\"] = 1] = \"CLASS_TO_PLAIN\";\n    TransformationType[TransformationType[\"CLASS_TO_CLASS\"] = 2] = \"CLASS_TO_CLASS\";\n})(TransformationType || (TransformationType = {}));\n//# sourceMappingURL=transformation-type.enum.js.map","import { TransformationType } from './enums';\n/**\n * Storage all library metadata.\n */\nvar MetadataStorage = /** @class */ (function () {\n    function MetadataStorage() {\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this._typeMetadatas = new Map();\n        this._transformMetadatas = new Map();\n        this._exposeMetadatas = new Map();\n        this._excludeMetadatas = new Map();\n        this._ancestorsMap = new Map();\n    }\n    // -------------------------------------------------------------------------\n    // Adder Methods\n    // -------------------------------------------------------------------------\n    MetadataStorage.prototype.addTypeMetadata = function (metadata) {\n        if (!this._typeMetadatas.has(metadata.target)) {\n            this._typeMetadatas.set(metadata.target, new Map());\n        }\n        this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    };\n    MetadataStorage.prototype.addTransformMetadata = function (metadata) {\n        if (!this._transformMetadatas.has(metadata.target)) {\n            this._transformMetadatas.set(metadata.target, new Map());\n        }\n        if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {\n            this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);\n        }\n        this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);\n    };\n    MetadataStorage.prototype.addExposeMetadata = function (metadata) {\n        if (!this._exposeMetadatas.has(metadata.target)) {\n            this._exposeMetadatas.set(metadata.target, new Map());\n        }\n        this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    };\n    MetadataStorage.prototype.addExcludeMetadata = function (metadata) {\n        if (!this._excludeMetadatas.has(metadata.target)) {\n            this._excludeMetadatas.set(metadata.target, new Map());\n        }\n        this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    MetadataStorage.prototype.findTransformMetadatas = function (target, propertyName, transformationType) {\n        return this.findMetadatas(this._transformMetadatas, target, propertyName).filter(function (metadata) {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === TransformationType.CLASS_TO_CLASS ||\n                    transformationType === TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        });\n    };\n    MetadataStorage.prototype.findExcludeMetadata = function (target, propertyName) {\n        return this.findMetadata(this._excludeMetadatas, target, propertyName);\n    };\n    MetadataStorage.prototype.findExposeMetadata = function (target, propertyName) {\n        return this.findMetadata(this._exposeMetadatas, target, propertyName);\n    };\n    MetadataStorage.prototype.findExposeMetadataByCustomName = function (target, name) {\n        return this.getExposedMetadatas(target).find(function (metadata) {\n            return metadata.options && metadata.options.name === name;\n        });\n    };\n    MetadataStorage.prototype.findTypeMetadata = function (target, propertyName) {\n        return this.findMetadata(this._typeMetadatas, target, propertyName);\n    };\n    MetadataStorage.prototype.getStrategy = function (target) {\n        var excludeMap = this._excludeMetadatas.get(target);\n        var exclude = excludeMap && excludeMap.get(undefined);\n        var exposeMap = this._exposeMetadatas.get(target);\n        var expose = exposeMap && exposeMap.get(undefined);\n        if ((exclude && expose) || (!exclude && !expose))\n            return 'none';\n        return exclude ? 'excludeAll' : 'exposeAll';\n    };\n    MetadataStorage.prototype.getExposedMetadatas = function (target) {\n        return this.getMetadata(this._exposeMetadatas, target);\n    };\n    MetadataStorage.prototype.getExcludedMetadatas = function (target) {\n        return this.getMetadata(this._excludeMetadatas, target);\n    };\n    MetadataStorage.prototype.getExposedProperties = function (target, transformationType) {\n        return this.getExposedMetadatas(target)\n            .filter(function (metadata) {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === TransformationType.CLASS_TO_CLASS ||\n                    transformationType === TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        })\n            .map(function (metadata) { return metadata.propertyName; });\n    };\n    MetadataStorage.prototype.getExcludedProperties = function (target, transformationType) {\n        return this.getExcludedMetadatas(target)\n            .filter(function (metadata) {\n            if (!metadata.options)\n                return true;\n            if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                return true;\n            if (metadata.options.toClassOnly === true) {\n                return (transformationType === TransformationType.CLASS_TO_CLASS ||\n                    transformationType === TransformationType.PLAIN_TO_CLASS);\n            }\n            if (metadata.options.toPlainOnly === true) {\n                return transformationType === TransformationType.CLASS_TO_PLAIN;\n            }\n            return true;\n        })\n            .map(function (metadata) { return metadata.propertyName; });\n    };\n    MetadataStorage.prototype.clear = function () {\n        this._typeMetadatas.clear();\n        this._exposeMetadatas.clear();\n        this._excludeMetadatas.clear();\n        this._ancestorsMap.clear();\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    MetadataStorage.prototype.getMetadata = function (metadatas, target) {\n        var metadataFromTargetMap = metadatas.get(target);\n        var metadataFromTarget;\n        if (metadataFromTargetMap) {\n            metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(function (meta) { return meta.propertyName !== undefined; });\n        }\n        var metadataFromAncestors = [];\n        for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n            var ancestor = _a[_i];\n            var ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                var metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(function (meta) { return meta.propertyName !== undefined; });\n                metadataFromAncestors.push.apply(metadataFromAncestors, metadataFromAncestor);\n            }\n        }\n        return metadataFromAncestors.concat(metadataFromTarget || []);\n    };\n    MetadataStorage.prototype.findMetadata = function (metadatas, target, propertyName) {\n        var metadataFromTargetMap = metadatas.get(target);\n        if (metadataFromTargetMap) {\n            var metadataFromTarget = metadataFromTargetMap.get(propertyName);\n            if (metadataFromTarget) {\n                return metadataFromTarget;\n            }\n        }\n        for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n            var ancestor = _a[_i];\n            var ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                var ancestorResult = ancestorMetadataMap.get(propertyName);\n                if (ancestorResult) {\n                    return ancestorResult;\n                }\n            }\n        }\n        return undefined;\n    };\n    MetadataStorage.prototype.findMetadatas = function (metadatas, target, propertyName) {\n        var metadataFromTargetMap = metadatas.get(target);\n        var metadataFromTarget;\n        if (metadataFromTargetMap) {\n            metadataFromTarget = metadataFromTargetMap.get(propertyName);\n        }\n        var metadataFromAncestorsTarget = [];\n        for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n            var ancestor = _a[_i];\n            var ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                if (ancestorMetadataMap.has(propertyName)) {\n                    metadataFromAncestorsTarget.push.apply(metadataFromAncestorsTarget, ancestorMetadataMap.get(propertyName));\n                }\n            }\n        }\n        return metadataFromAncestorsTarget\n            .slice()\n            .reverse()\n            .concat((metadataFromTarget || []).slice().reverse());\n    };\n    MetadataStorage.prototype.getAncestors = function (target) {\n        if (!target)\n            return [];\n        if (!this._ancestorsMap.has(target)) {\n            var ancestors = [];\n            for (var baseClass = Object.getPrototypeOf(target.prototype.constructor); typeof baseClass.prototype !== 'undefined'; baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {\n                ancestors.push(baseClass);\n            }\n            this._ancestorsMap.set(target, ancestors);\n        }\n        return this._ancestorsMap.get(target);\n    };\n    return MetadataStorage;\n}());\nexport { MetadataStorage };\n//# sourceMappingURL=MetadataStorage.js.map","import { MetadataStorage } from './MetadataStorage';\n/**\n * Default metadata storage is used as singleton and can be used to storage all metadatas.\n */\nexport var defaultMetadataStorage = new MetadataStorage();\n//# sourceMappingURL=storage.js.map","var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport 'reflect-metadata';\nimport { defaultMetadataStorage } from './storage';\nimport { TransformationType } from './enums';\nimport { getGlobal, isPromise } from './utils';\nfunction instantiateArrayType(arrayType) {\n    var array = new arrayType();\n    if (!(array instanceof Set) && !('push' in array)) {\n        return [];\n    }\n    return array;\n}\nvar TransformOperationExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TransformOperationExecutor(transformationType, options) {\n        this.transformationType = transformationType;\n        this.options = options;\n        // -------------------------------------------------------------------------\n        // Private Properties\n        // -------------------------------------------------------------------------\n        this.recursionStack = new Set();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    TransformOperationExecutor.prototype.transform = function (source, value, targetType, arrayType, isMap, level) {\n        var _this = this;\n        if (level === void 0) { level = 0; }\n        if (Array.isArray(value) || value instanceof Set) {\n            var newValue_1 = arrayType && this.transformationType === TransformationType.PLAIN_TO_CLASS\n                ? instantiateArrayType(arrayType)\n                : [];\n            value.forEach(function (subValue, index) {\n                var subSource = source ? source[index] : undefined;\n                if (!_this.options.enableCircularCheck || !_this.isCircular(subValue)) {\n                    var realTargetType = void 0;\n                    if (typeof targetType !== 'function' &&\n                        targetType &&\n                        targetType.options &&\n                        targetType.options.discriminator &&\n                        targetType.options.discriminator.property &&\n                        targetType.options.discriminator.subTypes) {\n                        if (_this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                            realTargetType = targetType.options.discriminator.subTypes.find(function (subType) {\n                                return subType.name === subValue[targetType.options.discriminator.property];\n                            });\n                            var options = { newObject: newValue_1, object: subValue, property: undefined };\n                            var newType = targetType.typeFunction(options);\n                            realTargetType === undefined ? (realTargetType = newType) : (realTargetType = realTargetType.value);\n                            if (!targetType.options.keepDiscriminatorProperty)\n                                delete subValue[targetType.options.discriminator.property];\n                        }\n                        if (_this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                            realTargetType = subValue.constructor;\n                        }\n                        if (_this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                            subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find(function (subType) { return subType.value === subValue.constructor; }).name;\n                        }\n                    }\n                    else {\n                        realTargetType = targetType;\n                    }\n                    var value_1 = _this.transform(subSource, subValue, realTargetType, undefined, subValue instanceof Map, level + 1);\n                    if (newValue_1 instanceof Set) {\n                        newValue_1.add(value_1);\n                    }\n                    else {\n                        newValue_1.push(value_1);\n                    }\n                }\n                else if (_this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    if (newValue_1 instanceof Set) {\n                        newValue_1.add(subValue);\n                    }\n                    else {\n                        newValue_1.push(subValue);\n                    }\n                }\n            });\n            return newValue_1;\n        }\n        else if (targetType === String && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return String(value);\n        }\n        else if (targetType === Number && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Number(value);\n        }\n        else if (targetType === Boolean && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Boolean(value);\n        }\n        else if ((targetType === Date || value instanceof Date) && !isMap) {\n            if (value instanceof Date) {\n                return new Date(value.valueOf());\n            }\n            if (value === null || value === undefined)\n                return value;\n            return new Date(value);\n        }\n        else if (!!getGlobal().Buffer && (targetType === Buffer || value instanceof Buffer) && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Buffer.from(value);\n        }\n        else if (isPromise(value) && !isMap) {\n            return new Promise(function (resolve, reject) {\n                value.then(function (data) { return resolve(_this.transform(undefined, data, targetType, undefined, undefined, level + 1)); }, reject);\n            });\n        }\n        else if (!isMap && value !== null && typeof value === 'object' && typeof value.then === 'function') {\n            // Note: We should not enter this, as promise has been handled above\n            // This option simply returns the Promise preventing a JS error from happening and should be an inaccessible path.\n            return value; // skip promise transformation\n        }\n        else if (typeof value === 'object' && value !== null) {\n            // try to guess the type\n            if (!targetType && value.constructor !== Object /* && TransformationType === TransformationType.CLASS_TO_PLAIN*/)\n                targetType = value.constructor;\n            if (!targetType && source)\n                targetType = source.constructor;\n            if (this.options.enableCircularCheck) {\n                // add transformed type to prevent circular references\n                this.recursionStack.add(value);\n            }\n            var keys = this.getKeys(targetType, value, isMap);\n            var newValue = source ? source : {};\n            if (!source &&\n                (this.transformationType === TransformationType.PLAIN_TO_CLASS ||\n                    this.transformationType === TransformationType.CLASS_TO_CLASS)) {\n                if (isMap) {\n                    newValue = new Map();\n                }\n                else if (targetType) {\n                    newValue = new targetType();\n                }\n                else {\n                    newValue = {};\n                }\n            }\n            var _loop_1 = function (key) {\n                if (key === '__proto__' || key === 'constructor') {\n                    return \"continue\";\n                }\n                var valueKey = key;\n                var newValueKey = key, propertyName = key;\n                if (!this_1.options.ignoreDecorators && targetType) {\n                    if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        var exposeMetadata = defaultMetadataStorage.findExposeMetadataByCustomName(targetType, key);\n                        if (exposeMetadata) {\n                            propertyName = exposeMetadata.propertyName;\n                            newValueKey = exposeMetadata.propertyName;\n                        }\n                    }\n                    else if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN ||\n                        this_1.transformationType === TransformationType.CLASS_TO_CLASS) {\n                        var exposeMetadata = defaultMetadataStorage.findExposeMetadata(targetType, key);\n                        if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                            newValueKey = exposeMetadata.options.name;\n                        }\n                    }\n                }\n                // get a subvalue\n                var subValue = undefined;\n                if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                    /**\n                     * This section is added for the following report:\n                     * https://github.com/typestack/class-transformer/issues/596\n                     *\n                     * We should not call functions or constructors when transforming to class.\n                     */\n                    subValue = value[valueKey];\n                }\n                else {\n                    if (value instanceof Map) {\n                        subValue = value.get(valueKey);\n                    }\n                    else if (value[valueKey] instanceof Function) {\n                        subValue = value[valueKey]();\n                    }\n                    else {\n                        subValue = value[valueKey];\n                    }\n                }\n                // determine a type\n                var type = undefined, isSubValueMap = subValue instanceof Map;\n                if (targetType && isMap) {\n                    type = targetType;\n                }\n                else if (targetType) {\n                    var metadata_1 = defaultMetadataStorage.findTypeMetadata(targetType, propertyName);\n                    if (metadata_1) {\n                        var options = { newObject: newValue, object: value, property: propertyName };\n                        var newType = metadata_1.typeFunction ? metadata_1.typeFunction(options) : metadata_1.reflectedType;\n                        if (metadata_1.options &&\n                            metadata_1.options.discriminator &&\n                            metadata_1.options.discriminator.property &&\n                            metadata_1.options.discriminator.subTypes) {\n                            if (!(value[valueKey] instanceof Array)) {\n                                if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                                    type = metadata_1.options.discriminator.subTypes.find(function (subType) {\n                                        if (subValue && subValue instanceof Object && metadata_1.options.discriminator.property in subValue) {\n                                            return subType.name === subValue[metadata_1.options.discriminator.property];\n                                        }\n                                    });\n                                    type === undefined ? (type = newType) : (type = type.value);\n                                    if (!metadata_1.options.keepDiscriminatorProperty) {\n                                        if (subValue && subValue instanceof Object && metadata_1.options.discriminator.property in subValue) {\n                                            delete subValue[metadata_1.options.discriminator.property];\n                                        }\n                                    }\n                                }\n                                if (this_1.transformationType === TransformationType.CLASS_TO_CLASS) {\n                                    type = subValue.constructor;\n                                }\n                                if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                                    if (subValue) {\n                                        subValue[metadata_1.options.discriminator.property] = metadata_1.options.discriminator.subTypes.find(function (subType) { return subType.value === subValue.constructor; }).name;\n                                    }\n                                }\n                            }\n                            else {\n                                type = metadata_1;\n                            }\n                        }\n                        else {\n                            type = newType;\n                        }\n                        isSubValueMap = isSubValueMap || metadata_1.reflectedType === Map;\n                    }\n                    else if (this_1.options.targetMaps) {\n                        // try to find a type in target maps\n                        this_1.options.targetMaps\n                            .filter(function (map) { return map.target === targetType && !!map.properties[propertyName]; })\n                            .forEach(function (map) { return (type = map.properties[propertyName]); });\n                    }\n                    else if (this_1.options.enableImplicitConversion &&\n                        this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        // if we have no registererd type via the @Type() decorator then we check if we have any\n                        // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n                        var reflectedType = Reflect.getMetadata('design:type', targetType.prototype, propertyName);\n                        if (reflectedType) {\n                            type = reflectedType;\n                        }\n                    }\n                }\n                // if value is an array try to get its custom array type\n                var arrayType_1 = Array.isArray(value[valueKey])\n                    ? this_1.getReflectedType(targetType, propertyName)\n                    : undefined;\n                // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n                var subSource = source ? source[valueKey] : undefined;\n                // if its deserialization then type if required\n                // if we uncomment this types like string[] will not work\n                // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n                //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n                // if newValue is a source object that has method that match newKeyName then skip it\n                if (newValue.constructor.prototype) {\n                    var descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);\n                    if ((this_1.transformationType === TransformationType.PLAIN_TO_CLASS ||\n                        this_1.transformationType === TransformationType.CLASS_TO_CLASS) &&\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        ((descriptor && !descriptor.set) || newValue[newValueKey] instanceof Function))\n                        return \"continue\";\n                }\n                if (!this_1.options.enableCircularCheck || !this_1.isCircular(subValue)) {\n                    var transformKey = this_1.transformationType === TransformationType.PLAIN_TO_CLASS ? newValueKey : key;\n                    var finalValue = void 0;\n                    if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                        // Get original value\n                        finalValue = value[transformKey];\n                        // Apply custom transformation\n                        finalValue = this_1.applyCustomTransformations(finalValue, targetType, transformKey, value, this_1.transformationType);\n                        // If nothing change, it means no custom transformation was applied, so use the subValue.\n                        finalValue = value[transformKey] === finalValue ? subValue : finalValue;\n                        // Apply the default transformation\n                        finalValue = this_1.transform(subSource, finalValue, type, arrayType_1, isSubValueMap, level + 1);\n                    }\n                    else {\n                        if (subValue === undefined && this_1.options.exposeDefaultValues) {\n                            // Set default value if nothing provided\n                            finalValue = newValue[newValueKey];\n                        }\n                        else {\n                            finalValue = this_1.transform(subSource, subValue, type, arrayType_1, isSubValueMap, level + 1);\n                            finalValue = this_1.applyCustomTransformations(finalValue, targetType, transformKey, value, this_1.transformationType);\n                        }\n                    }\n                    if (finalValue !== undefined || this_1.options.exposeUnsetFields) {\n                        if (newValue instanceof Map) {\n                            newValue.set(newValueKey, finalValue);\n                        }\n                        else {\n                            newValue[newValueKey] = finalValue;\n                        }\n                    }\n                }\n                else if (this_1.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    var finalValue = subValue;\n                    finalValue = this_1.applyCustomTransformations(finalValue, targetType, key, value, this_1.transformationType);\n                    if (finalValue !== undefined || this_1.options.exposeUnsetFields) {\n                        if (newValue instanceof Map) {\n                            newValue.set(newValueKey, finalValue);\n                        }\n                        else {\n                            newValue[newValueKey] = finalValue;\n                        }\n                    }\n                }\n            };\n            var this_1 = this;\n            // traverse over keys\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                _loop_1(key);\n            }\n            if (this.options.enableCircularCheck) {\n                this.recursionStack.delete(value);\n            }\n            return newValue;\n        }\n        else {\n            return value;\n        }\n    };\n    TransformOperationExecutor.prototype.applyCustomTransformations = function (value, target, key, obj, transformationType) {\n        var _this = this;\n        var metadatas = defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);\n        // apply versioning options\n        if (this.options.version !== undefined) {\n            metadatas = metadatas.filter(function (metadata) {\n                if (!metadata.options)\n                    return true;\n                return _this.checkVersion(metadata.options.since, metadata.options.until);\n            });\n        }\n        // apply grouping options\n        if (this.options.groups && this.options.groups.length) {\n            metadatas = metadatas.filter(function (metadata) {\n                if (!metadata.options)\n                    return true;\n                return _this.checkGroups(metadata.options.groups);\n            });\n        }\n        else {\n            metadatas = metadatas.filter(function (metadata) {\n                return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;\n            });\n        }\n        metadatas.forEach(function (metadata) {\n            value = metadata.transformFn({ value: value, key: key, obj: obj, type: transformationType, options: _this.options });\n        });\n        return value;\n    };\n    // preventing circular references\n    TransformOperationExecutor.prototype.isCircular = function (object) {\n        return this.recursionStack.has(object);\n    };\n    TransformOperationExecutor.prototype.getReflectedType = function (target, propertyName) {\n        if (!target)\n            return undefined;\n        var meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);\n        return meta ? meta.reflectedType : undefined;\n    };\n    TransformOperationExecutor.prototype.getKeys = function (target, object, isMap) {\n        var _this = this;\n        // determine exclusion strategy\n        var strategy = defaultMetadataStorage.getStrategy(target);\n        if (strategy === 'none')\n            strategy = this.options.strategy || 'exposeAll'; // exposeAll is default strategy\n        // get all keys that need to expose\n        var keys = [];\n        if (strategy === 'exposeAll' || isMap) {\n            if (object instanceof Map) {\n                keys = Array.from(object.keys());\n            }\n            else {\n                keys = Object.keys(object);\n            }\n        }\n        if (isMap) {\n            // expose & exclude do not apply for map keys only to fields\n            return keys;\n        }\n        /**\n         * If decorators are ignored but we don't want the extraneous values, then we use the\n         * metadata to decide which property is needed, but doesn't apply the decorator effect.\n         */\n        if (this.options.ignoreDecorators && this.options.excludeExtraneousValues && target) {\n            var exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            var excludedProperties = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            keys = __spreadArray(__spreadArray([], exposedProperties), excludedProperties);\n        }\n        if (!this.options.ignoreDecorators && target) {\n            // add all exposed to list of keys\n            var exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                exposedProperties = exposedProperties.map(function (key) {\n                    var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                        return exposeMetadata.options.name;\n                    }\n                    return key;\n                });\n            }\n            if (this.options.excludeExtraneousValues) {\n                keys = exposedProperties;\n            }\n            else {\n                keys = keys.concat(exposedProperties);\n            }\n            // exclude excluded properties\n            var excludedProperties_1 = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            if (excludedProperties_1.length > 0) {\n                keys = keys.filter(function (key) {\n                    return !excludedProperties_1.includes(key);\n                });\n            }\n            // apply versioning options\n            if (this.options.version !== undefined) {\n                keys = keys.filter(function (key) {\n                    var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n                    return _this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);\n                });\n            }\n            // apply grouping options\n            if (this.options.groups && this.options.groups.length) {\n                keys = keys.filter(function (key) {\n                    var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n                    return _this.checkGroups(exposeMetadata.options.groups);\n                });\n            }\n            else {\n                keys = keys.filter(function (key) {\n                    var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    return (!exposeMetadata ||\n                        !exposeMetadata.options ||\n                        !exposeMetadata.options.groups ||\n                        !exposeMetadata.options.groups.length);\n                });\n            }\n        }\n        // exclude prefixed properties\n        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n            keys = keys.filter(function (key) {\n                return _this.options.excludePrefixes.every(function (prefix) {\n                    return key.substr(0, prefix.length) !== prefix;\n                });\n            });\n        }\n        // make sure we have unique keys\n        keys = keys.filter(function (key, index, self) {\n            return self.indexOf(key) === index;\n        });\n        return keys;\n    };\n    TransformOperationExecutor.prototype.checkVersion = function (since, until) {\n        var decision = true;\n        if (decision && since)\n            decision = this.options.version >= since;\n        if (decision && until)\n            decision = this.options.version < until;\n        return decision;\n    };\n    TransformOperationExecutor.prototype.checkGroups = function (groups) {\n        if (!groups)\n            return true;\n        return this.options.groups.some(function (optionGroup) { return groups.includes(optionGroup); });\n    };\n    return TransformOperationExecutor;\n}());\nexport { TransformOperationExecutor };\n//# sourceMappingURL=TransformOperationExecutor.js.map","export function isPromise(p) {\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n}\n//# sourceMappingURL=is-promise.util.js.map","/**\n * This function returns the global object across Node and browsers.\n *\n * Note: `globalThis` is the standardized approach however it has been added to\n * Node.js in version 12. We need to include this snippet until Node 12 EOL.\n */\nexport function getGlobal() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'window'.\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore: Cannot find name 'window'.\n        return window;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'self'.\n    if (typeof self !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore: Cannot find name 'self'.\n        return self;\n    }\n}\n//# sourceMappingURL=get-global.util.js.map","/**\n * These are the default options used by any transformation operation.\n */\nexport var defaultOptions = {\n    enableCircularCheck: false,\n    enableImplicitConversion: false,\n    excludeExtraneousValues: false,\n    excludePrefixes: undefined,\n    exposeDefaultValues: false,\n    exposeUnsetFields: true,\n    groups: undefined,\n    ignoreDecorators: false,\n    strategy: undefined,\n    targetMaps: undefined,\n    version: undefined,\n};\n//# sourceMappingURL=default-options.constant.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { defaultOptions } from './constants/default-options.constant';\nvar ClassTransformer = /** @class */ (function () {\n    function ClassTransformer() {\n    }\n    ClassTransformer.prototype.instanceToPlain = function (object, options) {\n        var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.classToPlainFromExist = function (object, plainObject, options) {\n        var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.plainToInstance = function (cls, plain, options) {\n        var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.plainToClassFromExist = function (clsObject, plain, options) {\n        var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.instanceToInstance = function (object, options) {\n        var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.classToClassFromExist = function (object, fromObject, options) {\n        var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n        return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n    };\n    ClassTransformer.prototype.serialize = function (object, options) {\n        return JSON.stringify(this.instanceToPlain(object, options));\n    };\n    /**\n     * Deserializes given JSON string to a object of the given class.\n     */\n    ClassTransformer.prototype.deserialize = function (cls, json, options) {\n        var jsonObject = JSON.parse(json);\n        return this.plainToInstance(cls, jsonObject, options);\n    };\n    /**\n     * Deserializes given JSON string to an array of objects of the given class.\n     */\n    ClassTransformer.prototype.deserializeArray = function (cls, json, options) {\n        var jsonObject = JSON.parse(json);\n        return this.plainToInstance(cls, jsonObject, options);\n    };\n    return ClassTransformer;\n}());\nexport { ClassTransformer };\n//# sourceMappingURL=ClassTransformer.js.map","import { ClassTransformer } from './ClassTransformer';\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\nvar classTransformer = new ClassTransformer();\nexport function instanceToPlain(object, options) {\n    return classTransformer.instanceToPlain(object, options);\n}\nexport function classToPlainFromExist(object, plainObject, options) {\n    return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\nexport function plainToInstance(cls, plain, options) {\n    return classTransformer.plainToInstance(cls, plain, options);\n}\nexport function plainToClassFromExist(clsObject, plain, options) {\n    return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\nexport function instanceToInstance(object, options) {\n    return classTransformer.instanceToInstance(object, options);\n}\nexport function classToClassFromExist(object, fromObject, options) {\n    return classTransformer.classToClassFromExist(object, fromObject, options);\n}\nexport function serialize(object, options) {\n    return classTransformer.serialize(object, options);\n}\n/**\n * Deserializes given JSON string to a object of the given class.\n *\n * @deprecated This function is being removed. Please use the following instead:\n * ```\n * instanceToClass(cls, JSON.parse(json), options)\n * ```\n */\nexport function deserialize(cls, json, options) {\n    return classTransformer.deserialize(cls, json, options);\n}\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n *\n * @deprecated This function is being removed. Please use the following instead:\n * ```\n * JSON.parse(json).map(value => instanceToClass(cls, value, options))\n * ```\n *\n */\nexport function deserializeArray(cls, json, options) {\n    return classTransformer.deserializeArray(cls, json, options);\n}\n//# sourceMappingURL=index.js.map","import { defaultMetadataStorage } from '../storage';\n/**\n * Marks the given class or property as excluded. By default the property is excluded in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\nexport function Exclude(options) {\n    if (options === void 0) { options = {}; }\n    /**\n     * NOTE: The `propertyName` property must be marked as optional because\n     * this decorator used both as a class and a property decorator and the\n     * Typescript compiler will freak out if we make it mandatory as a class\n     * decorator only receives one parameter.\n     */\n    return function (object, propertyName) {\n        defaultMetadataStorage.addExcludeMetadata({\n            target: object instanceof Function ? object : object.constructor,\n            propertyName: propertyName,\n            options: options,\n        });\n    };\n}\n//# sourceMappingURL=exclude.decorator.js.map","import { defaultMetadataStorage } from '../storage';\n/**\n * Marks the given class or property as included. By default the property is included in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\nexport function Expose(options) {\n    if (options === void 0) { options = {}; }\n    /**\n     * NOTE: The `propertyName` property must be marked as optional because\n     * this decorator used both as a class and a property decorator and the\n     * Typescript compiler will freak out if we make it mandatory as a class\n     * decorator only receives one parameter.\n     */\n    return function (object, propertyName) {\n        defaultMetadataStorage.addExposeMetadata({\n            target: object instanceof Function ? object : object.constructor,\n            propertyName: propertyName,\n            options: options,\n        });\n    };\n}\n//# sourceMappingURL=expose.decorator.js.map","import { defaultMetadataStorage } from '../storage';\n/**\n * Defines a custom logic for value transformation.\n *\n * Can be applied to properties only.\n */\nexport function Transform(transformFn, options) {\n    if (options === void 0) { options = {}; }\n    return function (target, propertyName) {\n        defaultMetadataStorage.addTransformMetadata({\n            target: target.constructor,\n            propertyName: propertyName,\n            transformFn: transformFn,\n            options: options,\n        });\n    };\n}\n//# sourceMappingURL=transform.decorator.js.map","import { ClassTransformer } from '../ClassTransformer';\n/**\n * Return the class instance only with the exposed properties.\n *\n * Can be applied to functions and getters/setters only.\n */\nexport function TransformInstanceToInstance(params) {\n    return function (target, propertyKey, descriptor) {\n        var classTransformer = new ClassTransformer();\n        var originalMethod = descriptor.value;\n        descriptor.value = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = originalMethod.apply(this, args);\n            var isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then(function (data) { return classTransformer.instanceToInstance(data, params); })\n                : classTransformer.instanceToInstance(result, params);\n        };\n    };\n}\n//# sourceMappingURL=transform-instance-to-instance.decorator.js.map","import { ClassTransformer } from '../ClassTransformer';\n/**\n * Transform the object from class to plain object and return only with the exposed properties.\n *\n * Can be applied to functions and getters/setters only.\n */\nexport function TransformInstanceToPlain(params) {\n    return function (target, propertyKey, descriptor) {\n        var classTransformer = new ClassTransformer();\n        var originalMethod = descriptor.value;\n        descriptor.value = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = originalMethod.apply(this, args);\n            var isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then(function (data) { return classTransformer.instanceToPlain(data, params); })\n                : classTransformer.instanceToPlain(result, params);\n        };\n    };\n}\n//# sourceMappingURL=transform-instance-to-plain.decorator.js.map","import { ClassTransformer } from '../ClassTransformer';\n/**\n * Return the class instance only with the exposed properties.\n *\n * Can be applied to functions and getters/setters only.\n */\nexport function TransformPlainToInstance(classType, params) {\n    return function (target, propertyKey, descriptor) {\n        var classTransformer = new ClassTransformer();\n        var originalMethod = descriptor.value;\n        descriptor.value = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = originalMethod.apply(this, args);\n            var isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';\n            return isPromise\n                ? result.then(function (data) { return classTransformer.plainToInstance(classType, data, params); })\n                : classTransformer.plainToInstance(classType, result, params);\n        };\n    };\n}\n//# sourceMappingURL=transform-plain-to-instance.decorator.js.map","import 'reflect-metadata';\nimport { defaultMetadataStorage } from '../storage';\n/**\n * Specifies a type of the property.\n * The given TypeFunction can return a constructor. A discriminator can be given in the options.\n *\n * Can be applied to properties only.\n */\nexport function Type(typeFunction, options) {\n    if (options === void 0) { options = {}; }\n    return function (target, propertyName) {\n        var reflectedType = Reflect.getMetadata('design:type', target, propertyName);\n        defaultMetadataStorage.addTypeMetadata({\n            target: target.constructor,\n            propertyName: propertyName,\n            reflectedType: reflectedType,\n            typeFunction: typeFunction,\n            options: options,\n        });\n    };\n}\n//# sourceMappingURL=type.decorator.js.map"],"names":["Reflect","TransformationType","factory","root","global","self","this","Function","exporter","makeExporter","target","previous","key","value","Object","defineProperty","configurable","writable","hasOwn","prototype","hasOwnProperty","supportsSymbol","Symbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","iterator","supportsCreate","create","supportsProto","__proto__","Array","downLevel","HashMap","MakeDictionary","has","map","call","get","undefined","functionPrototype","getPrototypeOf","usePolyfill","process","env","_Map","Map","entries","CreateMapPolyfill","_Set","Set","CreateSetPolyfill","Metadata","WeakMap","CreateWeakMapPolyfill","decorate","decorators","propertyKey","attributes","IsUndefined","IsArray","TypeError","IsConstructor","DecorateConstructor","IsObject","IsNull","DecorateProperty","ToPropertyKey","metadata","metadataKey","metadataValue","decorator","IsPropertyKey","OrdinaryDefineOwnMetadata","defineMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","getMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","delete","size","targetMetadata","i","length","decorated","descriptor","O","P","Create","set","MetadataKey","parent","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","keys","_i","ownKeys_1","add","push","_a","parentKeys_1","GetIterator","k","next","IteratorStep","nextValue","IteratorValue","e","IteratorClose","Type","x","IsSymbol","ToPrimitive","input","PreferredType","hint","exoticToPrim","GetMethod","result","OrdinaryToPrimitive","toString_1","toString","IsCallable","valueOf","toString_2","argument","ToString","isArray","V","func","obj","method","iterResult","done","f","proto","prototypeProto","constructor","cacheSentinel","arraySentinel","MapIterator","values","selector","_index","_keys","_values","_selector","index","throw","error","return","_cacheKey","_cacheIndex","enumerable","_find","clear","getKey","getValue","getEntry","insert","indexOf","_","_map","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","Math","random","GenRandomBytes","Uint8Array","crypto","getRandomValues","msCrypto","data","offset","byte","toLowerCase","__","defaultMetadataStorage","MetadataStorage","_typeMetadatas","_transformMetadatas","_exposeMetadatas","_excludeMetadatas","_ancestorsMap","addTypeMetadata","propertyName","addTransformMetadata","addExposeMetadata","addExcludeMetadata","findTransformMetadatas","transformationType","findMetadatas","filter","options","toClassOnly","toPlainOnly","CLASS_TO_CLASS","PLAIN_TO_CLASS","CLASS_TO_PLAIN","findExcludeMetadata","findMetadata","findExposeMetadata","findExposeMetadataByCustomName","name","getExposedMetadatas","find","findTypeMetadata","getStrategy","excludeMap","exclude","exposeMap","expose","getExcludedMetadatas","getExposedProperties","getExcludedProperties","metadatas","metadataFromTarget","metadataFromTargetMap","from","meta","metadataFromAncestors","getAncestors","ancestor","ancestorMetadataMap","metadataFromAncestor","apply","concat","ancestorResult","metadataFromAncestorsTarget","slice","reverse","ancestors","baseClass","__spreadArray","to","il","j","TransformOperationExecutor","recursionStack","transform","source","targetType","arrayType","isMap","level","p","_this","newValue_1","array","instantiateArrayType","forEach","subValue","subSource","enableCircularCheck","isCircular","realTargetType","discriminator","property","subTypes","subType","newObject","object","newType","typeFunction","keepDiscriminatorProperty","value_1","String","Number","Boolean","Date","globalThis","window","Buffer","then","getKeys","newValue","_loop_1","valueKey","newValueKey","this_1","ignoreDecorators","exposeMetadata","type","isSubValueMap","metadata_1","reflectedType","targetMaps","properties","enableImplicitConversion","arrayType_1","getReflectedType","getOwnPropertyDescriptor","finalValue","applyCustomTransformations","exposeUnsetFields","transformKey","exposeDefaultValues","keys_1","Promise","resolve","reject","version","checkVersion","since","until","groups","checkGroups","transformFn","strategy","excludeExtraneousValues","exposedProperties","excludedProperties","excludedProperties_1","includes","excludePrefixes","every","prefix","substr","decision","some","optionGroup","defaultOptions","__assign","assign","t","s","n","arguments","ClassTransformer","instanceToPlain","classToPlainFromExist","plainObject","plainToInstance","cls","plain","plainToClassFromExist","clsObject","instanceToInstance","classToClassFromExist","fromObject","serialize","JSON","stringify","deserialize","json","jsonObject","parse","deserializeArray","classTransformer","params","originalMethod","args","isPromise","classType"],"mappings":"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"}